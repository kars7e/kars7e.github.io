<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Encoding on kars7e&#39;s Blog</title>
    <link>http://blog.kars7e.io/tags/encoding/index.xml</link>
    <description>Recent content in Encoding on kars7e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.kars7e.io/tags/encoding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating vcards in rails using vpim - which works in outlook with correct encoding</title>
      <link>http://blog.kars7e.io/2013/09/12/creating-vcards-in-rails-using-vpim-which-works/</link>
      <pubDate>Thu, 12 Sep 2013 12:28:00 +0000</pubDate>
      
      <guid>http://blog.kars7e.io/2013/09/12/creating-vcards-in-rails-using-vpim-which-works/</guid>
      <description>&lt;p&gt;Short info - how to create vcards in rails, which work correctly in Outlook 20xx.
I’m using awsome vpim gem.
In controller, where you will generate vcard, add this require:&lt;/p&gt;


require &#39;&#39;vpim/vcard&#39;&#39;


&lt;p&gt;The best working solution is to encode your vcard in utf-8, which is not currently available in vpim, so lets add following piece of code (after the require):&lt;/p&gt;


module Vpim
  class DirectoryInfo
    class Field
      class &lt;&lt; self
        alias_method :orig_create, :create

        # we overwrite Field.create for setting the CHARSET
        def create(name, value=&#39;&#39;, params={})
          # specify the lines you don&#39;t want to add a charset to
          lines_to_ignore = %w(BEGIN END VERSION)
          params.merge!({&#39;CHARSET&#39; =&gt; &#39;utf-8&#39;}) unless lines_to_ignore.include? name
          orig_create(name, value, params)
        end
      end

    end
  end
end


&lt;p&gt;It&amp;rdquo;s important to set charset to utf-8, not UTF-8 - Outlook won’t handle it!
Now you have to generate vcard itself - i’m doing it with following piece of code:&lt;/p&gt;


  #controller method
  def vcard
    person = Person.visible.find(params[:id])
    card = Vpim::Vcard::Maker.make2 do |maker|

      #setting up name
      maker.add_name do |name|
        name.prefix = &#39;&#39;
        name.given = person.first_name
        name.family = person.last_name
      end

      # setting up address.
      maker.add_addr do |addr|
        addr.location = &#39;work&#39;
        addr.street = person.location.street
        addr.postalcode = person.location.zip_code
        addr.region = person.location.city
        addr.country = &#39;Poland&#39;
      end

      maker.title = person.law_level
      maker.org = &#39;your company&#39;
      maker.add_field(Vpim::DirectoryInfo::Field.create(&#39;office&#39;, person.location.name ))
      maker.add_tel(person.phone) { |e| e.location = &#39;cell&#39;}
      maker.add_tel(person.location.phone) { |e| e.location = &#39;work&#39;}


      maker.add_email(person.email) { |e| e.location = &#39;work&#39; }

    end


&lt;p&gt;At the end, we have to send the file (still vcard method) :&lt;/p&gt;

&lt;p&gt;
 send_data card.to_s, :type =&gt; &#39;&#39;text/x-vcard&#39;&#39;, :filename =&gt; URI::encode(person.name) + &#39;&#39;.vcf&#39;&#39;
  end
&lt;/p&gt;

&lt;p&gt;Things to remember:
* Make correct charset
* set content-type (:type option) - you can sent charset also in content-type.
* URI:encode helps when filename includes non-ASCII characters&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>