<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filesyncer on kars7e&#39;s Blog</title>
    <link>http://blog.kars7e.io/tags/filesyncer/index.xml</link>
    <description>Recent content in Filesyncer on kars7e&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://blog.kars7e.io/tags/filesyncer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rust: first impressions</title>
      <link>http://blog.kars7e.io/2017/03/28/Rust-first-impressions/</link>
      <pubDate>Tue, 28 Mar 2017 17:09:31 -0700</pubDate>
      
      <guid>http://blog.kars7e.io/2017/03/28/Rust-first-impressions/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since my last &lt;a href=&#34;http://blog.kars7e.io/2017/03/17/Project-details-for-filesyncer/&#34;&gt;DSP post&lt;/a&gt;, mainly due to my trip to Poland and unavoidable result of it - jetlag. Let&amp;rsquo;s get back to the business, though. &lt;strong&gt;In this post, I will share my first impressions on Rust, as well as some code in filesyncer project&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s dig in!
&lt;/p&gt;

&lt;h2 id=&#34;implementing-simple-daemon&#34;&gt;Implementing simple daemon&lt;/h2&gt;

&lt;p&gt;I will reverse the order a bit, and start with the code of filesyncer first. It will give some &amp;ldquo;meat&amp;rdquo; to discuss. Goals for the first iteration of filesyncer code are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Application should run continuously, until it&amp;rsquo;s explicitly stopped by the user or an unrecoverable error occurred.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Application should be able to listen to and handle &lt;code&gt;INT&lt;/code&gt; (Ctrl+c) signal&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These goals seem relatively clear. The first requirement sounds very much like a &lt;a href=&#34;https://en.wikipedia.org/wiki/Daemon_(computing)&#34;&gt;daemon&lt;/a&gt;. In old days, one would add special logic to &amp;ldquo;daemonize&amp;rdquo; his/her application: ensure application is owned by &lt;code&gt;init&lt;/code&gt; process, standard output/input/error is correctly handled, file descriptors are closed, etc. This is not needed anymore, as today&amp;rsquo;s init systems (like systemd or upstart) are able to handle &amp;ldquo;normal&amp;rdquo; applications so that they can run in the background without an issue. We can also follow The &lt;a href=&#34;https://12factor.net/&#34;&gt;Twelve-factor app document&lt;/a&gt;, specifically the &amp;ldquo;&lt;a href=&#34;https://12factor.net/logs&#34;&gt;Treat logs as event streams&lt;/a&gt;&amp;rdquo; recommendation, and just print our messages to standard output, leaving their proper logging/storing to dedicated systems.&lt;/p&gt;

&lt;p&gt;We can then implement our first goal using the following piece of code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Starting our application...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Initialization logic&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Application started&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    	&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Handle file events&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Shutting down...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can compile and run this code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ rustc main.rs
warning: unreachable statement, &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#[warn(unreachable_code)] on by default&lt;/span&gt;
 --&amp;gt; main.rs:9:5
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     println!&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Shutting down...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
  &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; note: this error originates in a macro outside of the current crate

$ ls
LICENSE   README.md main      main.rs
$ ./main
Starting our application...
Application started
^C
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Woah!&lt;/strong&gt; There are several things that happened here. &lt;strong&gt;Let&amp;rsquo;s break it down.&lt;/strong&gt; First of all, this code compiles and produces an executable binary (we can see &amp;ldquo;main&amp;rdquo; file in &lt;strong&gt;ls&lt;/strong&gt; command output). However, it produces a warning: &amp;ldquo;unreachable statement&amp;rdquo;. Also, after running it, we can see it&amp;rsquo;s running continuously, but after sending INT signal (with the ctrl+c combination), we don&amp;rsquo;t see our &amp;ldquo;Shutting down&amp;hellip;&amp;rdquo; message! The compiler already warned us about that - the &lt;code&gt;println!&lt;/code&gt; statement is unreachable because there is no logic to break out of the loop. And since we haven&amp;rsquo;t implemented any &lt;code&gt;INT&lt;/code&gt; signal handler, the default action is taken, which is to immediately terminate program execution. Let&amp;rsquo;s fix that, and handle the &lt;code&gt;INT&lt;/code&gt; signal explicitly.&lt;/p&gt;

&lt;h2 id=&#34;adding-signal-handling&#34;&gt;Adding signal handling&lt;/h2&gt;

&lt;p&gt;Before we dive into signal handling in Rust, I would like to first mention how this is being done in Go - my &amp;ldquo;native&amp;rdquo; language. Go includes signal handling in its standard library. The &lt;a href=&#34;https://golang.org/pkg/os/signal/&#34;&gt;&lt;code&gt;os/signal&lt;/code&gt; package&lt;/a&gt; provides simple and elegant API to deal with signals through &lt;a href=&#34;https://tour.golang.org/concurrency/2&#34;&gt;channels&lt;/a&gt;. Here&amp;rsquo;s a quick example:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;os&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;os/signal&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;syscall&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;sigs&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #204a87&#34;&gt;make&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;bool&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Notify&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sigs&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;syscall&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SIGINT&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;syscall&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;SIGTERM&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;func&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;sig&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sigs&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sig&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #000000&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}()&lt;/span&gt;

    &lt;span style=&#34;color: #000000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;awaiting signal&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;done&lt;/span&gt;
    &lt;span style=&#34;color: #000000&#34;&gt;fmt&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Println&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;exiting&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sample creates two channels, registering one of them as an endpoint for signal handling. Next, it spins out a &lt;a href=&#34;https://tour.golang.org/concurrency/1&#34;&gt;goroutine&lt;/a&gt; which blocks until a signal is received, and when that happens it prints it to stdout and sends a message to &amp;ldquo;done&amp;rdquo; channel, effectively exiting the application (main function blocks until a message from &amp;ldquo;done&amp;rdquo; is received).&lt;/p&gt;

&lt;p&gt;This example shows how easy it is to handle signals in Go, and I hoped to find something similar in Rust. Turns out Rust does not have anything dedicated to signal handling in the standard library yet - there is an &lt;a href=&#34;https://github.com/rust-lang/rfcs/issues/1368&#34;&gt;RFC&lt;/a&gt;, however with no actual proposal yet. Reading through the discussion I stumbled upon crate called &lt;a href=&#34;https://crates.io/crates/chan-signal&#34;&gt;chan-signal&lt;/a&gt;. The docs say: &lt;em&gt;&amp;ldquo;This crate provides a simplistic interface to subscribe to operating system signals through a channel API.&amp;rdquo;&lt;/em&gt;. Sounds exactly like what I was looking for! &lt;strong&gt;Let&amp;rsquo;s give it a try&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First, I need to obtain this crate into my project. so far I was using single &lt;code&gt;main.rs&lt;/code&gt; file directly compiled using &lt;code&gt;rustc&lt;/code&gt; compiler. Let&amp;rsquo;s switch to the official way of doing things: &lt;a href=&#34;https://crates.io/&#34;&gt;Cargo&lt;/a&gt;. To &amp;ldquo;add&amp;rdquo; Cargo to our project, we need to create Cargo config file. &lt;code&gt;Cargo&lt;/code&gt; binary gives us an easy way to do that:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ Cargo init --bin
     Created binary &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;application&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; project
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;--bin&lt;/code&gt; switch was needed since our project is a binary (default mode is to create Rust library). We ended up with &lt;code&gt;Cargo.toml&lt;/code&gt; file, which looks more or less like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[package]&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;syncer&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;authors&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;[&amp;quot;Karol Stepniewski &amp;lt;kstepniewski@vmware.com&amp;gt;&amp;quot;]&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[dependencies]&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[[bin]]&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;syncer&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;path&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;main.rs&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have three sections in this file: package, dependencies and bin. The bin section was created because syncer&amp;rsquo;s source code (&lt;code&gt;main.rs&lt;/code&gt; file) lives directly in project main directory. Rust convention is to store source code in &lt;code&gt;src/&lt;/code&gt; subdirectory. Let&amp;rsquo;s move our code and remove the bin section:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ mkdir src
$ move main.rs src/
&lt;/pre&gt;&lt;/div&gt;


&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[package]&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;syncer&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #c4a000&#34;&gt;authors&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;[&amp;quot;Karol Stepniewski &amp;lt;kstepniewski@vmware.com&amp;gt;&amp;quot;]&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[dependencies]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s check if it works, by running &lt;code&gt;cargo build&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cargo build
   Compiling syncer v0.1.0 &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;file:///Users/kstepniewski/projects/syncer&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
warning: unreachable expression, &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#[warn(unreachable_code)] on by default&lt;/span&gt;
  --&amp;gt; src/main.rs:10:5
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     println!&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Shutting down...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; note: this error originates in a macro outside of the current crate

    Finished dev &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; in &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;.81 secs
$ ls
Cargo.lock Cargo.toml LICENSE    README.md  src        target
$ ls target/debug/
build       deps        examples    incremental native      syncer      syncer.d
$ target/debug/syncer
Starting our application...
Application started
^C
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks like it does! Now, let&amp;rsquo;s add the &lt;code&gt;chan-signal&lt;/code&gt; dependency (it also requires &lt;code&gt;chan&lt;/code&gt; crate):&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;1 &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[package]&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;2 &lt;/span&gt;&lt;span style=&#34;color: #c4a000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;syncer&amp;quot;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;3 &lt;/span&gt;&lt;span style=&#34;color: #c4a000&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;4 &lt;/span&gt;&lt;span style=&#34;color: #c4a000&#34;&gt;authors&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;[&amp;quot;Karol Stepniewski &amp;lt;kstepniewski@vmware.com&amp;gt;&amp;quot;]&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;5 &lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;6 &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;[dependencies]&lt;/span&gt;
&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;7 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;&lt;span style=&#34;color: #c4a000&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;0.1.19&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;span style=&#34;background-color: #f0f0f0; padding: 0 5px 0 5px&#34;&gt;8 &lt;/span&gt;&lt;span style=&#34;background-color: #ffffcc&#34;&gt;&lt;span style=&#34;color: #c4a000&#34;&gt;chan-signal&lt;/span&gt; &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;0.2.0&amp;quot;&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now, we build our application again:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cargo build
    Updating registry &lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;https://github.com/rust-lang/crates.io-index&lt;span style=&#34;color: #4e9a06&#34;&gt;`&lt;/span&gt;
 Downloading chan-signal v0.2.0
 Downloading chan v0.1.19
 Downloading lazy_static v0.2.5
 Downloading libc v0.2.21
 Downloading bit-set v0.4.0
 Downloading rand v0.3.15
 Downloading bit-vec v0.4.3
   Compiling lazy_static v0.2.5
   Compiling libc v0.2.21
   Compiling bit-vec v0.4.3
   Compiling bit-set v0.4.0
   Compiling rand v0.3.15
   Compiling chan v0.1.19
   Compiling chan-signal v0.2.0
   Compiling syncer v0.1.0 &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;file:///Users/kstepniewski/projects/syncer&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
warning: unreachable expression, &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#[warn(unreachable_code)] on by default&lt;/span&gt;
  --&amp;gt; src/main.rs:10:5
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     println!&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Shutting down...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;|&lt;/span&gt;
   &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt; note: this error originates in a macro outside of the current crate

    Finished dev &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; in &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;5&lt;/span&gt;.30 secs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It builds correctly! Time to use it. I&amp;rsquo;ve adapted the sample code from &lt;code&gt;chan-signal&lt;/code&gt; documentation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;#[macro_use]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;extern&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;crate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;extern&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;crate&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan_signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;use&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan_signal&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;Signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Starting our application...&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Initialization logic&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan_signal&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;notify&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Signal&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;INT&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;Signal&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;TERM&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;]);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// We create a channel to be used when application wants to stop itself.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sdone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;rdone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;sync&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Run our application logic in a separate thread.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;	&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;std&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;thread&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;spawn&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;move&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;||&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;sdone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;));&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Wait for a signal or for application to stop itself.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;chan_select&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;recv&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;-&amp;gt; &lt;span style=&#34;color: #000000&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Shutting down... (received signal: {:?})&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;signal&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;},&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;rdone&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;recv&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;            &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Application stopped.&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;_sdone&lt;/span&gt;: &lt;span style=&#34;color: #000000&#34;&gt;chan&lt;/span&gt;::&lt;span style=&#34;color: #000000&#34;&gt;Sender&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Application started&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;loop&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    	&lt;/span&gt;&lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;// Application logic&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Woah (again)!&lt;/strong&gt; There is a lot going on here. First, we&amp;rsquo;ve imported two external crates: &lt;code&gt;chan&lt;/code&gt; and &lt;code&gt;chan_signal&lt;/code&gt;. &lt;code&gt;chan&lt;/code&gt; is a multi-producer/multi-consumer channel library. Standard rust library already contains channels support, however, their implementation follows multi-producer/single-consumer semantics.&lt;/p&gt;

&lt;p&gt;Our main function grew considerably. We define a &lt;code&gt;signal&lt;/code&gt; variable via &lt;code&gt;chan_signal::notify&lt;/code&gt; static method. This method returns a special channel, that we can further read from to obtain our signal (if such is sent). We also declare a synchronous &lt;code&gt;(sdone, rdone)&lt;/code&gt; channel (it&amp;rsquo;s used for the same purpose as its Go version). We spawn new OS thread used to run our application logic through &lt;code&gt;run()&lt;/code&gt; function, passing &lt;code&gt;done&lt;/code&gt; channel as a mean to stop application execution if needed. Finally, we use &lt;a href=&#34;http://burntsushi.net/rustdoc/chan/macro.chan_select.html&#34;&gt;&lt;code&gt;chan_select!&lt;/code&gt;&lt;/a&gt; macro to &amp;ldquo;poll&amp;rdquo; our channels for messages - it will block until either of them returns a message. Let&amp;rsquo;s see how that works:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cargo build
   Compiling syncer v0.1.0 &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;file:///Users/kstepniewski/projects/syncer&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt;
    Finished dev &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;)&lt;/span&gt; in &lt;span style=&#34;color: #0000cf; font-weight: bold&#34;&gt;0&lt;/span&gt;.89 secs
$ target/debug/syncer
Starting our application...
Application started
^CShutting down... &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;received signal: Some&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;(&lt;/span&gt;INT&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Tada! We successfully handled the INT signal!&lt;/p&gt;

&lt;h2 id=&#34;caveats&#34;&gt;Caveats&lt;/h2&gt;

&lt;p&gt;There are always some! You probably spotted differences between Go and Rust version. Firstly, Go version uses only standard library packages, while Rust uses external creates to achieve a similar effect. Secondly, while Rust version uses native OS thread to run application logic, Go version utilizies lightweight goroutines (note: There seems to be &lt;a href=&#34;https://github.com/rustcc/coroutine-rs&#34;&gt;WIP on library&lt;/a&gt; to support coroutines in Rust). Finally, &lt;code&gt;chan-signal&lt;/code&gt; crate has no support for Windows. This is not very surprising, as signals are a POSIX thing, however Go is able to INT signal (as invoked through ctrl+c or ctrl+break) in Windows through &lt;code&gt;os/signal&lt;/code&gt;. I imagine such support could be added to &lt;code&gt;chan-signal&lt;/code&gt; as well if needed.&lt;/p&gt;

&lt;h2 id=&#34;what-about-those-first-impressions&#34;&gt;What about those first impressions?&lt;/h2&gt;

&lt;p&gt;When reading through Rust documentation, I&amp;rsquo;ve had few &amp;ldquo;OMG This is awesome!&amp;rdquo; moments. Pattern matching, variable bindings, &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; type, all these sound familiar from languages like Haskell or Elixir, and seem like a great addition to a system programming language, which is Rust&amp;rsquo;s main priority. As such, however, Rust focused on providing value in different areas, so certain things (like these I described above) are harder to achieve compared to Go. Having written that, I definitely see value in Rust. It&amp;rsquo;s too early for me to give full comparison of these languages (I will write such post once I get more proficient in Rust), but the much broader control over your program that Rust gives by default is already appealing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What about you? Go or Rust? What do you pick and why?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Project details for filesyncer</title>
      <link>http://blog.kars7e.io/2017/03/17/Project-details-for-filesyncer/</link>
      <pubDate>Fri, 17 Mar 2017 01:31:17 -0700</pubDate>
      
      <guid>http://blog.kars7e.io/2017/03/17/Project-details-for-filesyncer/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve became a huge fan of describing ideas using single sentence. If you can&amp;rsquo;t describe an idea this way, it may be that this idea needs more thought or it&amp;rsquo;s too complex and could be divided into smaller components (the latter is rare). Let me describe my project for this year&amp;rsquo;s edition of &lt;a href=&#34;http://blog.kars7e.io/2017/03/12/Daj-Si%C4%99-pozna%C4%87---challange-accepted-again/&#34;&gt;DSP contest&lt;/a&gt; using single sentence then:
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An application that continously runs on a computer, &lt;strong&gt;monitors for changes in selected path&lt;/strong&gt; and &lt;strong&gt;communicates these changes to other instances&lt;/strong&gt; of the same application running on different computers connected together in &lt;strong&gt;single L2 network&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There, I did it. I hope it conveys something meaningful to you. Of course, this is still very vague and, depending on the person who reads it, could be visualised as simple rsync running in daemon mode as well as very sophisticated distributed file system. Let me further clarify by providing some simple use cases.&lt;/p&gt;

&lt;h2 id=&#34;feature-requirements&#34;&gt;Feature requirements&lt;/h2&gt;

&lt;p&gt;A short list of features I would like to have, ordered by increasing complexity:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once executed, application runs continously, until user stops it using ctrl-C combination (or it receives TERM signal some other way).&lt;/li&gt;
&lt;li&gt;Application should take an argument which is a path to a directory on local filesystem.&lt;/li&gt;
&lt;li&gt;Application should monitor the specified directory by registering any changes to any files/subdirectories in that directory. Specifically, it should register new file or directory being created, existing file/directory being deleted, existing file or directory being renamed (why rename is a separate requirement I will write on a different occasion), and existing file&amp;rsquo;s content being modified.&lt;/li&gt;
&lt;li&gt;Application should be able to detect other instances of itself running in the same network by using network broadcasting&lt;/li&gt;
&lt;li&gt;Application should share the changes it detects with other instances of itself running in the same network.&lt;/li&gt;
&lt;li&gt;Application should listen for changes coming from other instances of itself&lt;/li&gt;
&lt;li&gt;Application should apply changes coming from other instances of itself to it&amp;rsquo;s local state.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I will stop here. It doesn&amp;rsquo;t seem like a lot of requirements, especially given that I won&amp;rsquo;t spend too much time veryfing if these features have been implemented correctly. &lt;strong&gt;The main goal here is to deliver MVP&lt;/strong&gt;, and the challenge is using language knew to me to achieve that MVP.&lt;/p&gt;

&lt;h2 id=&#34;one-more-thing-rust-installation&#34;&gt;One more thing - rust installation&lt;/h2&gt;

&lt;p&gt;I don&amp;rsquo;t want to produce another introductory post again, so let&amp;rsquo;s document some work. This will be trivial, but&amp;hellip; you have to start somewhere. I&amp;rsquo;m using &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust programming language&lt;/a&gt;, which means I should have installed on my system. Let&amp;rsquo;s do it then. I&amp;rsquo;m using MacOS, and de facto a standard &lt;a href=&#34;https://brew.sh/&#34;&gt;package manager&lt;/a&gt; for MacOS. Rust installation couldn&amp;rsquo;t be simpler:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ brew install rust
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which after a minute or so gives us &lt;code&gt;rustc&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ rustc --help
Usage: rustc &lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;[&lt;/span&gt;OPTIONS&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;]&lt;/span&gt; INPUT

Options:
    -h --help           Display this message
    --cfg SPEC          Configure the compilation environment
    .
    .
    .
    &lt;span style=&#34;color: #8f5902; font-style: italic&#34;&gt;# Omitted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let&amp;rsquo;s finish this post with simple, classic and mandatory &amp;ldquo;Hello world&amp;rdquo;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #204a87; font-weight: bold&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color: #000000&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #ce5c00; font-weight: bold&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #4e9a06&#34;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #f8f8f8; text-decoration: underline&#34;&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that we compile with &lt;code&gt;rustc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ rustc main.rs
$ ./main
Hello, world!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;rsquo;s it! Environment ready. I will follow up in the next post, where I will attempt to write a daemon that handles signals gracefully.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: I&amp;rsquo;m learning Rust as I write these posts. Hence, there will be a lot of modifications and sudden changes of course in my code.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>